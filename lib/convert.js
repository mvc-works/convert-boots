// Generated by CoffeeScript 1.6.2
var boots, convert, convert_file, format, fs, path, rain, replace, show, watch_convert, watch_convert_file, watch_directory, _ref;

_ref = require("rain-boots"), rain = _ref.rain, boots = _ref.boots;

show = function() {};

fs = require("fs");

path = require("path");

exports.boots = {};

format = function(options) {
  var _ref1, _ref2, _ref3, _ref4;

  options = options || {};
  if ((_ref1 = options.from) == null) {
    options.from = "./";
  }
  if ((_ref2 = options.to) == null) {
    options.to = "./";
  }
  if ((_ref3 = options.interval) == null) {
    options.interval = 600;
  }
  if ((_ref4 = options.transform) == null) {
    options.transform = function(string) {
      return string;
    };
  }
  return options;
};

replace = function(file_name, options) {
  var child_name, dirname;

  dirname = path.dirname(file_name);
  child_name = path.basename(file_name).replace("." + options.filter, "." + options.extname);
  return path.join(dirname, child_name);
};

convert_file = function(options) {
  show("convert_file", options);
  return boots.throttle(options.interval, function() {
    var child_name, content, to_file;

    show("core function", options.from);
    content = fs.readFileSync(options.from, "utf8");
    content = options.transform(content);
    if (options.to.match(/\S+\.\w+$/) != null) {
      to_file = replace(options.to, options);
    } else {
      child_name = options.from.match(/[^\\]+$/)[0];
      child_name = replace(child_name, options);
      to_file = path.join(options.to, child_name);
    }
    fs.writeFileSync(to_file, content);
    return show("converted", to_file);
  });
};

watch_convert_file = function(options) {
  show("watch_convert_file", options);
  return fs.watchFile(options.from, {
    interval: 200
  }, function() {
    return convert_file(options);
  });
};

watch_directory = function(options) {
  var children;

  show("watch_directory", options);
  children = fs.readdirSync(options.from);
  show(children);
  return children.forEach(function(child) {
    var clone_options;

    if ((path.extname(child)).slice(1) === options.filter) {
      clone_options = {
        __proto__: options,
        from: path.join(options.from, child),
        to: path.join(options.to, child)
      };
      return watch_convert_file(clone_options);
    }
  });
};

convert = function(options) {
  var children, status;

  show("the convert function", options);
  status = fs.statSync(options.from);
  if (status.isDirectory()) {
    show("isDirectory");
    children = fs.readdirSync(options.from);
    return children.forEach(function(child) {
      var clone_options;

      clone_options = {
        __proto__: options,
        from: path.join(options.from, child),
        to: path.join(options.to, child)
      };
      return convert_file(clone_options);
    });
  } else {
    return convert_file(options);
  }
};

watch_convert = function(options) {
  var status;

  show("watch_convert start");
  status = fs.statSync(options.from);
  if (status.isDirectory()) {
    return watch_directory(options);
  } else {
    return watch_convert_file(options);
  }
};

exports.boots.convert = function(options) {
  show("convert function start");
  return convert(format(options));
};

exports.boots.watch = function(options) {
  show("watch function start");
  options = format(options);
  return watch_convert(options);
};
